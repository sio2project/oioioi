# Generate documentation script

# This script traverses the main oioioi directory, making an entry
# in modules.rst file for each oioioi module.


from __future__ import print_function

import os
import sys

sys.path.append("../../")

import oioioi

sections_suff = '../rst/source/sections/'
sections_dist = len(sections_suff.split(os.sep))

entries = ["""
..
   Autogenerated by the /rst/gendoc.py script

==============
OIOIOI Modules
==============

.. list-table::
   :widths: 25 75
   :header-rows: 1
   
   * - Module
     - Implements
     
"""]
missing = []

oioioi_dirname = os.path.dirname(oioioi.__file__)
sections_dirname = os.path.join(oioioi_dirname, sections_suff)
for root, dirs, files in os.walk(oioioi_dirname):
    dirs.sort()
    rel_root = os.path.relpath(root, sections_dirname)
    module_name = '.'.join(rel_root.split(os.sep)[sections_dist - 1:])

    if "." in module_name or module_name.startswith("_") or not module_name:
        continue

    include_readme = f".. include:: {rel_root}/README.rst"
    if 'README.rst' not in files:
        include_readme = "*README.rst missing*"
        missing.append(module_name)

    entries.append(
        f"   * - {module_name}\n"
        f"     - {include_readme}\n"
    )

content = ''.join(entries)

if missing:
    print(sys.stderr, "Some README.rst for modules are missing:", missing)



if len(sys.argv) > 1 and (sys.argv[1] == '--verbose' or sys.argv[1] == '-v'):
    print(content)

f = open(os.path.join(oioioi_dirname, sections_suff, 'modules.rst'), 'w')
f.write(content)
f.close()
